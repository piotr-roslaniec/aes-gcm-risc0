use crate::utils::{bits_to_byte, byte_to_bits, word_xor, Block, Stream};

// AES encryption function
pub fn aes(block: Block, key: Stream) -> Block {
    let key_expanded = key_expansion(key);
    let first_round_key: Block = [
        key_expanded[0],
        key_expanded[1],
        key_expanded[2],
        key_expanded[3],
    ];
    let mut state = add_round_key(block, first_round_key);

    for round in 1..10 {
        state = sub_bytes(state);
        state = shift_rows(state);
        state = mix_columns(state);
        let round_key: Block = [
            key_expanded[round * 4],
            key_expanded[round * 4 + 1],
            key_expanded[round * 4 + 2],
            key_expanded[round * 4 + 3],
        ];
        state = add_round_key(state, round_key);
    }

    state = sub_bytes(state);
    state = shift_rows(state);
    let final_round_key: Block = [
        key_expanded[40],
        key_expanded[41],
        key_expanded[42],
        key_expanded[43],
    ];
    state = add_round_key(state, final_round_key);
    state
}

// Key expansion function
pub(crate) fn key_expansion(key: [u8; 16]) -> [[u8; 4]; 44] {
    let mut key_expanded: [[u8; 4]; 44] = [[0; 4]; 44];

    for i in 0..4 {
        let mut temp = [0; 4];
        for j in 0..4 {
            temp[j] = key[i * 4 + j];
        }
        key_expanded[i] = temp;
    }

    for round in 4..44 {
        let mut temp = key_expanded[round - 1];
        if round % 4 == 0 {
            temp = sub_word(rot_word(temp));
            temp = word_xor(temp, round_constant((round / 4) as u8 - 1));
        }
        key_expanded[round] = word_xor(key_expanded[round - 4], temp);
    }

    key_expanded
}

// SubWord and RotWord functions
fn sub_word(mut word: [u8; 4]) -> [u8; 4] {
    for i in 0..4 {
        word[i] = sbox(word[i]);
    }
    word
}

fn rot_word(word: [u8; 4]) -> [u8; 4] {
    [word[1], word[2], word[3], word[0]]
}

// Round constant function
fn round_constant(round: u8) -> [u8; 4] {
    let constants = [
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1b, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00],
    ];
    constants[round as usize]
}

// AddRoundKey function
pub fn add_round_key(state: Block, key: Block) -> Block {
    let mut new_state: Block = [[0; 4]; 4];
    for i in 0..4 {
        for j in 0..4 {
            new_state[i][j] = state[i][j] ^ key[j][i];
        }
    }
    new_state
}

// MixColumns function
fn mix_columns(state: Block) -> Block {
    let mut new_state: Block = state;
    for i in 0..4 {
        let column = [state[0][i], state[1][i], state[2][i], state[3][i]];
        let new_column = mix_column(column);
        for j in 0..4 {
            new_state[j][i] = new_column[j];
        }
    }
    new_state
}

fn mix_column(column: [u8; 4]) -> [u8; 4] {
    let mut new_column = [0; 4];
    new_column[0] = gfmulx(column[0]) ^ gfmul3(column[1]) ^ column[2] ^ column[3];
    new_column[1] = column[0] ^ gfmulx(column[1]) ^ gfmul3(column[2]) ^ column[3];
    new_column[2] = column[0] ^ column[1] ^ gfmulx(column[2]) ^ gfmul3(column[3]);
    new_column[3] = gfmul3(column[0]) ^ column[1] ^ column[2] ^ gfmulx(column[3]);
    new_column
}

fn gfmul3(byte: u8) -> u8 {
    gfmulx(byte) ^ byte
}

fn gfmulx(byte: u8) -> u8 {
    let bits = byte_to_bits(byte);
    let mut result = [0; 8];
    for i in 0..7 {
        result[i] = bits[i + 1];
    }
    let mut result_byte = bits_to_byte(result);
    if bits[0] == 1 {
        result_byte ^= 0x1b;
    }
    result_byte
}

// ShiftRows function
fn shift_rows(state: Block) -> Block {
    let mut new_state = state;
    new_state[1] = [state[1][1], state[1][2], state[1][3], state[1][0]];
    new_state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]];
    new_state[3] = [state[3][3], state[3][0], state[3][1], state[3][2]];
    new_state
}

// SubBytes function
fn sub_bytes(state: Block) -> Block {
    let mut new_state = state;
    for i in 0..4 {
        for j in 0..4 {
            new_state[i][j] = sbox(state[i][j]);
        }
    }
    new_state
}

// SBox function
fn sbox(byte: u8) -> u8 {
    let sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,
        0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4,
        0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71,
        0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
        0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6,
        0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb,
        0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45,
        0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
        0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44,
        0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a,
        0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
        0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
        0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25,
        0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e,
        0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1,
        0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,
        0x16,
    ];
    sbox[byte as usize]
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_aes() {
        let block: Block = [
            [0x32, 0x88, 0x31, 0xe0],
            [0x43, 0x5a, 0x31, 0x37],
            [0xf6, 0x30, 0x98, 0x07],
            [0xa8, 0x8d, 0xa2, 0x34],
        ];
        let key: Stream = [
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ];
        let cipher: Block = [
            [0x39, 0x02, 0xdc, 0x19],
            [0x25, 0xdc, 0x11, 0x6a],
            [0x84, 0x09, 0x85, 0x0b],
            [0x1d, 0xfb, 0x97, 0x32],
        ];
        assert_eq!(aes(block, key), cipher);
    }
}
